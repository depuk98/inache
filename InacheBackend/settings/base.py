"""
Django settings for InacheBackend project.
Generated by 'django-admin startproject' using Django 3.2.7.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from datetime import datetime


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-2h4===z(x(h-iru*k$n^)d(6in#o5xwlq%j9(kwhk_73gyo*4n'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True


SECRET_KEY = "django-insecure-2h4===z(x(h-iru*k$n^)d(6in#o5xwlq%j9(kwhk_73gyo*4n"

DEBUG = True


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework.authtoken",
    "accounts",
    "corsheaders",
    "rest_framework",
    "django_filters",
    # 'coreapi',
    "drf_yasg",
    #'django_extensions'
    # "health_check",
    # "health_check.db",
    # "health_check.storage",
    # "health_check.contrib.migrations",
    "django_crontab",
    # "debug_toolbar",

]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    #"debug_toolbar.middleware.DebugToolbarMiddleware",

]

ROOT_URLCONF = "InacheBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
INTERNAL_IPS = [
    "127.0.0.1",
]

WSGI_APPLICATION = "InacheBackend.wsgi.application"
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240 # higher than the count of fields

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# for staging and prod(atleat for now)

# export inache_database=inache_db6

# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': 'django_debug.log',
#         },
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['file','console'],
#         }
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticroot")
path_obj = Path(BASE_DIR)
new_path = str(path_obj.parent)
print(new_path)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(new_path, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.BaseUserModel"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'rest_framework.authentication.TokenAuthentication',
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    #     # uncomment it
    # ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=2),
    "ROTATE_REFRESH_TOKENS": True,
    "UPDATE_LAST_LOGIN": True,

}

ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True

#TODO: [Settings to tweak for a working sessions]

# CORS_ALLOW_CREDENTIALS = True

# SESSION_COOKIE_HTTPONLY = False

# SESSION_COOKIE_DOMAIN = 'localhost'
# SESSION_COOKIE_PATH = '/'

# SESSION_COOKIE_SAMESITE = 'None'

# settings.py

# Use SES as the email backend
EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_ACCESS_KEY_ID = 'AKIAUL4AWPROGDU4UC7E'
AWS_SECRET_ACCESS_KEY = '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'
AWS_SES_REGION_NAME = 'ap-south-1'


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'email-smtp.ap-south-1.amazonaws.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'AKIAUL4AWPROPKIGY5MD'      # Must create SMTP Credentials
# EMAIL_HOST_PASSWORD = 'BH7c0blxvl4Y3T7fuxh7ymoNvvEykVXSYwAk7xuT+EPc'  # Must create SMTP Credentials
# DEFAULT_FROM_EMAIL = 'no-reply@inache.co' # If don't need, comment out!!


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Bearer", "in": "header"}
    }
}
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'inache_service': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': 'logs/inache_service_{}.log'.format(datetime.today().strftime('%Y-%m-%d')),
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 15,
#         },
#     },
#     'formatters': {
#         'json': {
#             '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
#             'fmt': '%(asctime)s %(levelname)s %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S',
#         },
#     },
#     'loggers': {
#         'inache_service': {
#             'handlers': ['inache_service'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }


# cron job runs evry day at 09:00 am
CRONJOBS = [
    ('30 3 * * *', 'accounts.scheduleTasks.checkForTasks'),
    ('0 0 * * 0', 'accounts.uploads.workerDataUpload')
    ]
